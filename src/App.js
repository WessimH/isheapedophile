import React, { useState } from 'react';
import {
    Box,
    Button,
    Container,
    Dialog,
    DialogTitle,
    DialogContent,
    DialogActions,
    FormControl,
    InputLabel,
    MenuItem,
    Select,
    TextField,
    Typography,
} from '@mui/material';
import FavoriteIcon from '@mui/icons-material/Favorite';
import WarningAmberIcon from '@mui/icons-material/WarningAmber';

// üíñ G√©n√©rateur de po√®mes "fa√ßon IA"
const generatePoem = (yourAge, otherAge) => {
    const templates = [
        `√Ä ${yourAge} ans, mon c≈ìur s'est √©pris,\nDe ton sourire, de tes doux √©crits.\nEt toi √† ${otherAge}, si lumineux,\nTu rends mes jours bien plus heureux.`,
        `Entre ${yourAge} et ${otherAge} printemps,\nNa√Æt un amour doux et charmant.\nDans chaque regard, un feu discret,\nQui r√©chauffe nos tendres secrets.`,
        `Toi, ${otherAge} ans de lumi√®re,\nMoi, ${yourAge}, un brin de myst√®re.\nNos √¢mes dansent sans d√©tour,\nSur les notes d‚Äôun tendre amour.`,
        `${yourAge} ans √† r√™ver d‚Äô√©toiles,\nEt ${otherAge} pour √©crire l‚Äôhistoire.\nNotre lien, doux comme une toile,\nPeint les couleurs d‚Äôun doux espoir.`,
    ];
    return templates[Math.floor(Math.random() * templates.length)];
};

// üß† √âvaluation morale de la relation
const evaluateMoralite = (yourAge, otherAge, yourSituation, otherSituation) => {
    const ageDiff = Math.abs(yourAge - otherAge);
    const bothMajors = yourAge >= 18 && otherAge >= 18;
    const bothMinors = yourAge < 18 && otherAge < 18;

    if (bothMinors) {
        if (yourSituation === "high school" && otherSituation === "high school" && ageDiff <= 3) {
            return "üëç Relation √©quilibr√©e entre lyc√©ens.";
        }
        if (yourSituation === "high school" && otherSituation === "university" && ageDiff > 2) {
            return "‚ö†Ô∏è L√©gale, mais moralement limite (lyc√©e/universit√© avec √©cart important).";
        }
        return "‚ö†Ô∏è L√©gale entre mineurs mais potentiellement d√©s√©quilibr√©e.";
    }

    if (yourAge < 18 || otherAge < 18) {
        return "‚ùå L‚Äôun est mineur, l‚Äôautre majeur : situation moralement douteuse.";
    }

    // Les deux sont majeurs
    if (yourSituation === "working" && otherSituation === "working" && ageDiff <= 10) {
        return "üëç Relation adulte √©quilibr√©e.";
    }
    if ((yourSituation === "high school" && otherSituation === "working") || (yourSituation === "working" && otherSituation === "high school")) {
        return "‚ùå L‚Äôun travaille, l‚Äôautre est au lyc√©e : d√©s√©quilibre moral.";
    }

    return "‚ö†Ô∏è L√©gale, mais attention √† l'√©cart d'√¢ge et au contexte.";
};

function AgeForm() {
    const [yourAge, setYourAge] = useState('');
    const [otherAge, setOtherAge] = useState('');
    const [situation, setSituation] = useState('');
    const [otherSituation, setOtherSituation] = useState('');
    const [dialog, setDialog] = useState({ open: false, title: '', message: '', warning: false });

    const handleSubmit = (e) => {
        e.preventDefault();

        const yourAgeNum = parseInt(yourAge, 10);
        const otherAgeNum = parseInt(otherAge, 10);

        if (yourAgeNum < 18 && otherAgeNum >= 18) {
            setDialog({
                open: true,
                title: '‚ö†Ô∏è Pr√©vention',
                message:
                    "Une relation entre un¬∑e mineur¬∑e et un¬∑e majeur¬∑e peut √™tre inappropri√©e ou ill√©gale. Si tu ressens un malaise, parle √† un adulte de confiance ou appelle le 119 (France).",
                warning: true,
            });
            return;
        }

        if (yourAgeNum < 18 && otherAgeNum < 18) {
            const ageDiff = Math.abs(yourAgeNum - otherAgeNum);
            if (ageDiff > 3) {
                setDialog({
                    open: true,
                    title: '‚ö†Ô∏è Attention',
                    message:
                        "M√™me entre mineurs, un √©cart d‚Äô√¢ge important peut cr√©er un d√©s√©quilibre. Sois prudent¬∑e et cherche du soutien si besoin.",
                    warning: true,
                });
                return;
            }
        }

        const poem = generatePoem(yourAgeNum, otherAgeNum);
        const moralite = evaluateMoralite(yourAgeNum, otherAgeNum, situation, otherSituation);

        setDialog({
            open: true,
            title: 'üíñ R√©sultat de votre relation',
            message: `${poem}\n\nüß† Analyse morale :\n${moralite}`,
            warning: false,
        });
    };

    const handleCloseDialog = () => {
        setDialog({ ...dialog, open: false });
    };

    return (
        <Container maxWidth="sm" sx={{ mt: 5 }}>
            <Box component="form" onSubmit={handleSubmit} sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
                <Typography variant="h4" align="center" gutterBottom>
                    üí¨ V√©rificateur de relation
                </Typography>

                <TextField
                    label="Ton √¢ge"
                    type="number"
                    value={yourAge}
                    onChange={(e) => setYourAge(e.target.value)}
                    required
                    fullWidth
                />

                <FormControl fullWidth required>
                    <InputLabel>Ta situation</InputLabel>
                    <Select value={situation} onChange={(e) => setSituation(e.target.value)} label="Ta situation">
                        <MenuItem value="middle school">Coll√®ge</MenuItem>
                        <MenuItem value="high school">Lyc√©e</MenuItem>
                        <MenuItem value="university">Universit√©</MenuItem>
                        <MenuItem value="working">Travail</MenuItem>
                        <MenuItem value="other">Autre</MenuItem>
                    </Select>
                </FormControl>

                <TextField
                    label="√Çge de l'autre personne"
                    type="number"
                    value={otherAge}
                    onChange={(e) => setOtherAge(e.target.value)}
                    required
                    fullWidth
                />

                <FormControl fullWidth required>
                    <InputLabel>Situation de l'autre personne</InputLabel>
                    <Select
                        value={otherSituation}
                        onChange={(e) => setOtherSituation(e.target.value)}
                        label="Situation de l'autre personne"
                    >
                        <MenuItem value="middle school">Coll√®ge</MenuItem>
                        <MenuItem value="high school">Lyc√©e</MenuItem>
                        <MenuItem value="university">Universit√©</MenuItem>
                        <MenuItem value="working">Travail</MenuItem>
                        <MenuItem value="other">Autre</MenuItem>
                    </Select>
                </FormControl>

                <Button variant="contained" color="primary" type="submit">
                    V√©rifier
                </Button>
            </Box>

            <Dialog open={dialog.open} onClose={handleCloseDialog}>
                <DialogTitle>
                    {dialog.warning ? (
                        <WarningAmberIcon color="error" sx={{ mr: 1 }} />
                    ) : (
                        <FavoriteIcon color="primary" sx={{ mr: 1 }} />
                    )}
                    {dialog.title}
                </DialogTitle>
                <DialogContent>
                    <Typography whiteSpace="pre-line">{dialog.message}</Typography>
                </DialogContent>
                <DialogActions>
                    <Button onClick={handleCloseDialog}>Fermer</Button>
                </DialogActions>
            </Dialog>
        </Container>
    );
}

export default AgeForm;
